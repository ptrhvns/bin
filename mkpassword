#!/usr/bin/env ruby

begin; require "rubygems"; rescue LoadError; end
require "optparse"
require "ostruct"
require "digest/md5"
require "highline"

# Print a message plus any exception information to stderr and abort.
def error(message=nil)
  abort "ERROR#{ message ? ": #{ message }" : "" }#{ $! ? ": #{ $! }" : "" }"
end

# Process command line and run control file options.
def process_options
  parser = OptionParser.new
  options = OpenStruct.new :action => :md5, :length => 8

  parser.banner = <<-END
Usage: #{File.basename($0)} [options]

Make a password.
  END

  parser.separator ""
  parser.separator "options:"

  parser.on("-h", "--help", "show this message and exit") do
    puts parser
    exit
  end

  parser.on("-l",
            "--length LENGTH",
            Integer,
            "create with LENGTH (8 default)") do |l|
    options.length = l
  end

  parser.on("-m", "--md5", "create MD5 hash from questions (default)") do
    options.action = :md5
  end

  parser.on("-r", "--random", "create as random") do
    options.action = :random
  end

  parser.parse!(ARGV) rescue OptionParser::InvalidOption error
  options
end

def printpw(password)
  puts "Generated Password => #{ password }"
end

def make_md5_password(options)
  hl = HighLine.new
  master = hl.ask("Master Password: ") { |q| q.echo = false }
  string = hl.ask("Instance String: ")
  digest = Digest::MD5.hexdigest("#{ master }:#{ string }")[0,options.length]
  printpw digest
end

def make_random_password(options)
  all = (33..126).map { |i| i.chr }
  rdm = lambda { |x| a = all.select { |e| e =~ x }; a[rand(a.length)] }

  # Ensure one upper case, one lower, one digit, and one special character.
  pw = [/[A-Z]/, /[a-z]/, /[0-9]/, /\W/].inject([]) { |p, x| p << rdm.call(x) }

  if options.length > pw.length
    (options.length - pw.length).times { pw << all[rand(all.length)] }
  end

  password = []
  options.length.times { password << pw.delete_at(rand(pw.length)) }
  printpw password.join
end

# Starting point of the program.
def main
  Signal.trap("INT") {exit}
  options = process_options

  case options.action
  when :md5 then make_md5_password(options)
  when :random then make_random_password(options)
  end
end

main if $0 == __FILE__

