#!/usr/bin/env -S uv run --script --quiet
# /// script
# requires-python = ">=3.13"
# dependencies = []
# ///

import argparse
import contextlib
import os
import subprocess


def home(*paths):
    """Form new paths by combining home directory and paths."""
    return os.path.join(os.environ["HOME"], *paths)


def child_directories(parents):
    """Build paths of child directories."""
    children = []

    for p in parents:
        if os.path.isdir(p):
            for d in os.listdir(p):
                j = os.path.join(p, d)

                if os.path.isdir(j):
                    children.append(j)

    return children


CHILD_DIRECTORIES = [
    # currently empty
]

PARENT_DIRECTORIES = [
    home("depot", "local"),
    home("depot", "remote"),
]

ALL_DIRECTORIES = CHILD_DIRECTORIES + child_directories(PARENT_DIRECTORIES)


def isgitdir(directory):
    """Check if a directory is a Git repository."""
    return os.path.isdir(os.path.join(directory, ".git"))


@contextlib.contextmanager
def cd(directory):
    """Temporarily change directory."""
    savedir = os.getcwd()
    os.chdir(os.path.expanduser(directory))

    try:
        yield
    finally:
        os.chdir(savedir)


def print_dirty(directories):
    """Print dirty Git repositories."""
    for d in directories:
        if isgitdir(d):
            with cd(d):
                result = subprocess.run(
                    ["git", "status", "--porcelain"],
                    check=True,
                    stdout=subprocess.PIPE,
                )

                if result.stdout.count(b"\n") > 0:
                    print(d, "(changes)")
                    continue

                result = subprocess.run(
                    ["git", "status"],
                    check=True,
                    stdout=subprocess.PIPE,
                )

                if b"Your branch is ahead" in result.stdout:
                    print(d, "(ahead)")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Check for dirty Git repositories in hard-coded locations."
    )
    args = parser.parse_args()
    print_dirty(ALL_DIRECTORIES)
