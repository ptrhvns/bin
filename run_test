#!/usr/bin/env python

from argparse import ArgumentParser
from os import environ, path
from re import search, sub
import itertools
import json
import sys

sys.path.append(path.join(environ['HOME'], 'lib'))

from pylocal.output import die
from pylocal.shell import cd, run


def process_args():
    parser = ArgumentParser(
        description='Detect how to run tests, and run them.'
    )
    parser.add_argument(
        'file_name',
        help='name of the file from which this command was run',
    )
    parser.add_argument(
        '-t',
        default=None,
        dest='target',
        help='which test(s) in the file name to run (default is all)',
    )
    return parser.parse_args()


def rspec(args):
    line = f':{args.target}' if args.target else ''

    if path.exists('./bin/rspec'):
        run(['./bin/rspec', '-f', 'd',
             f'{args.file_name}{line}'], verbose=False)
    elif path.exists('./server/bin/rspec'):
        with cd('server'):
            file_name = sub('server/', '', args.file_name, count=1)
            run(['./bin/rspec', '-f', 'd',
                 f'{file_name}{line}'], verbose=False)
    else:
        run(['bundle', 'exec', 'rspec', '-f', 'd', f'{args.file_name}{line}'],
            verbose=False)


def find_up_tree(directory, file):
    root_visited = False
    while True:
        if root_visited:
            return None

        full_path = path.join(directory, file)

        if path.exists(full_path):
            return full_path
        else:
            directory, _ = path.split(directory)

            if directory == '/':
                root_visited = True


def javascript(args):
    abs_file_name = path.abspath(args.file_name)
    package_path = find_up_tree(path.dirname(abs_file_name), 'package.json')

    if not package_path:
        die('failed to find JavaScript testing strategy:', args.file_name)

    with cd(path.dirname(package_path)):
        with open(package_path) as package_file:
            scripts = json.load(package_file)['scripts']
            target = None

            if '/e2e/' in abs_file_name:
                target = scripts.get('test:e2e')
            elif '/unit/' in abs_file_name:
                target = scripts.get('test:unit')
            elif 'mocha' in abs_file_name:
                target = scripts.get('test:mocha')

            if not target:
                die('failed to find appropriate test command in package.json')

            cmd = ['time', 'npx'] + target.split()[0:-1] + [abs_file_name]
            run(cmd, verbose=False)


def rake(args):
    run(['bundle', 'exec', 'rake', 'test', f'TEST={args.file_name}'],
        verbose=False)


def python(args):
    if not path.exists('manage.py'):
        die('failed to find Python testing strategy:', args.file_name)

    label = path.basename(path.dirname(args.file_name))
    pattern = path.basename(args.file_name)

    if args.target:
        run(['python', 'manage.py', 'test', label,
             '--pattern', pattern, '--tag=only'], verbose=False)
    else:
        run(['python', 'manage.py', 'test', label, '--pattern', pattern],
            verbose=False)


if __name__ == '__main__':
    args = process_args()

    if search(r'\.jsx?$', args.file_name):
        javascript(args)
    elif search(r'spec\.rb$', args.file_name):
        rspec(args)
    elif search(r'test.*\.py$', args.file_name):
        python(args)
    elif search(r'test\.rb$', args.file_name):
        rake(args)
    else:
        die('unrecognized file type:', args.file_name)
