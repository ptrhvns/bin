#!/usr/bin/env python

import itertools
import json
import sys
from argparse import ArgumentParser
from os import environ, path
from re import search, sub

sys.path.append(path.join(environ["HOME"], "lib"))

from output import die
from shell import cd, run


class TestingStrategyNotFound(Exception):
    def __init__(self, filename):
        super().__init__(f"testing strategy not found for {filename}")


def process_args():
    parser = ArgumentParser(description="Detect how to run tests, and run them.")
    parser.add_argument(
        "file_name", help="name of the file from which this command was run"
    )
    parser.add_argument(
        "-t",
        default=None,
        dest="target",
        help="which test(s) in the file name to run (default is all)",
    )
    return parser.parse_args()


def find_up_tree(directory, file):
    root_visited = False
    while True:
        if root_visited:
            return None

        full_path = path.join(directory, file)

        if path.exists(full_path):
            return full_path
        else:
            directory, _ = path.split(directory)

            if directory == "/":
                root_visited = True


def file_contains(path, text):
    with open(path) as f:
        return True if text in f.read() else False


def rspec(args):
    line = f":{args.target}" if args.target else ""

    if path.exists("./bin/rspec"):
        run(
            ["time", "./bin/rspec", "-f", "d", f"{args.file_name}{line}"],
            verbose=False,
        )
    elif path.exists("./server/bin/rspec"):
        with cd("server"):
            file_name = sub("server/", "", args.file_name, count=1)
            run(
                ["time", "./bin/rspec", "-f", "d", f"{file_name}{line}"], verbose=False,
            )
    elif path.exists("./server"):
        with cd("server"):
            file_name = sub("server/", "", args.file_name, count=1)
            run(
                ["time", "bundle", "exec", "rspec", "-f", "d", f"{file_name}{line}",],
                verbose=False,
            )
    else:
        run(
            ["time", "bundle", "exec", "rspec", "-f", "d", f"{args.file_name}{line}",],
            verbose=False,
        )


def javascript(args):
    abs_file_name = path.abspath(args.file_name)
    package_path = find_up_tree(path.dirname(abs_file_name), "package.json")

    if not package_path:
        raise TestingStrategyNotFound(args.file_name)

    with cd(path.dirname(package_path)):
        with open(package_path) as package_file:
            scripts = json.load(package_file)["scripts"]
            target = None

            if "/e2e/" in abs_file_name:
                target = scripts.get("test:e2e")
            elif "/unit/" in abs_file_name:
                target = scripts.get("test:unit")
            elif "mocha" in abs_file_name:
                target = scripts.get("test:mocha")
            else:
                target = scripts.get("test")

            if not target:
                raise TestingStrategyNotFound(args.file_name)

            cmd = ["time", "npx"] + target.split()[0:-1] + [abs_file_name]
            run(cmd, verbose=False)


def rake(args):
    run(
        ["bundle", "exec", "rake", "test", f"TEST={args.file_name}"], verbose=False,
    )


def python(args):
    abs_filename = path.abspath(args.file_name)
    abs_dirname = path.dirname(abs_filename)

    manage_path = find_up_tree(abs_dirname, "manage.py")
    if manage_path:
        label = path.basename(path.dirname(args.file_name))
        pattern = path.basename(args.file_name)
        if args.target:
            cmd = [
                "python",
                "manage.py",
                "test",
                label,
                "--pattern",
                pattern,
                "--tag=only",
            ]
        else:
            cmd = ["python", "manage.py", "test", label, "--pattern", pattern]
        run(cmd, verbose=False)
        return

    requirements_path = find_up_tree(abs_dirname, "requirements.txt")
    if requirements_path and file_contains(requirements_path, "pytest"):
        with cd(path.dirname(requirements_path)):
            cmd = ["pytest", "-q", abs_filename]
            run(cmd, verbose=False)
        return

    raise TestingStrategyNotFound(args.file_name)


if __name__ == "__main__":
    args = process_args()

    try:
        if search(r"\.jsx?$", args.file_name):
            javascript(args)
        elif search(r"spec\.rb$", args.file_name):
            rspec(args)
        elif search(r"(.*_test|test_.*)\.py$", args.file_name):
            python(args)
        elif search(r"test\.rb$", args.file_name):
            rake(args)
        else:
            raise TestingStrategyNotFound(args.file_name)
    except TestingStrategyNotFound as e:
        die(str(e))
