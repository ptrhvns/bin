#!/usr/bin/env python

from argparse import ArgumentParser, Namespace
from os import environ, path
from re import search
from typing import Any, Callable, Dict, ItemsView, Match, Optional, Sequence, Tuple, TypeVar
import sys

sys.path.append(path.join(environ['HOME'], 'lib'))

from pylocal.output import die
from pylocal.shell import run


def process_args() -> Namespace:
    parser = ArgumentParser(
        description='Detect how to run tests, and run them.'
    )
    parser.add_argument(
        'file_name',
        help='name of the file from which this command was run',
    )
    parser.add_argument(
        '-t',
        default=None,
        dest='target',
        help='which test(s) in the file name to run (default is all)',
    )
    return parser.parse_args()


def rspec(args: Namespace) -> None:
    line = f':{args.target}' if args.target else ''
    if path.exists('./bin/rspec'):
        run(['./bin/rspec', '-f', 'd', f'{args.file_name}{line}'])
    else:
        run(['bundle', 'exec', 'rspec', '-f', 'd', f'{args.file_name}{line}'])


def javascript(args: Namespace) -> None:
    if path.exists('./node_modules/.bin/mocha'):
        run(['./node_modules/.bin/mocha', args.file_name])
    else:
        die('failed find JavaScript testing strategy:', args.file_name)


def rake(args: Namespace) -> None:
    run(['bundle', 'exec', 'rake', 'test', f'TEST={args.file_name}'])


def python(args: Namespace) -> None:
    if path.exists('manage.py'):
        label = path.basename(path.dirname(args.file_name))
        pattern = path.basename(args.file_name)
        if args.target:
            run(['python', 'manage.py', 'test', label,
                 '--pattern', pattern, '--tag=only'])
        else:
            run(['python', 'manage.py', 'test', label, '--pattern', pattern])
    else:
        die('failed find Python testing strategy:', args.file_name)


TTestsRe = str
TTestsFn = Callable[[Namespace], None]
TTestsTuple = Tuple[TTestsRe, TTestsFn]

TFirstItems = ItemsView[TTestsRe, TTestsFn]
TFirstFn = Callable[[TTestsTuple], Optional[Match[Any]]]


def first(items: TFirstItems, fn: TFirstFn) -> Optional[TTestsTuple]:
    for x in items:
        if fn(x):
            return x
    return None


TESTS: Dict[TTestsRe, TTestsFn] = {
    r'\.js$': javascript,
    r'spec\.rb$': rspec,
    r'test.*\.py$': python,
    r'test\.rb$': rake,
}

if __name__ == '__main__':
    args = process_args()

    def find_test_match(t: TTestsTuple) -> Optional[Match[Any]]:
        return search(t[0], args.file_name)

    match = first(TESTS.items(), find_test_match)

    if not match:
        die('unrecognized file type:', args.file_name)
    else:
        match[1](args)
