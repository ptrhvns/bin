#!/usr/bin/env ruby

require 'rubygems'

require 'csv'
require 'etc'
require 'httpclient'
require 'nokogiri'
require 'open-uri'
require 'set'
require 'thor'

# NOTE You'll need to setup Twitter app stuff for the `t` command. See the
# documentation for the `t` command.

# FIXME previous_id is off by one sometimes.
# TODO if no previous_id, RESULT_LIMIT should be default (20)

RCFILENAME = File.join(Etc.getpwuid.dir, '.twlinksrc')
RESULT_LIMIT = 1_000

FILTERS = [
  /facebook\.com/,
  /imgur\.com/,
  /instagram\.com/,
  /twitpic\.com/,
  /twitter.*status.*photo/,
  /flicker\.com/,
  /\.jpg$/i
]

class CLI < Thor
  default_command :get

  desc 'get', "get all links in tweets since last recorded ID (limit: #{ RESULT_LIMIT })"
  def get
    @http_client = HTTPClient.new
    @http_client.ssl_config.verify_mode = OpenSSL::SSL::VERIFY_NONE
    process_links(get_timeline(build_command))
  end

  desc 'reset', 'reset (remove) the last ID recorded'
  def reset
    File.truncate(RCFILENAME, 0) if File.exist?(RCFILENAME)
  end

  private

  def build_command
    command = "command t timeline -c -n #{ RESULT_LIMIT }"
    previous_id = File.exist?(RCFILENAME) ? File.read(RCFILENAME).to_i : 0
    command << " -s #{ (previous_id + 1) }" if previous_id > 0
    command
  end

  def get_timeline(command)
    timeline = CSV.parse(%x{#{ command }})
    timeline.shift # remove CSV headers
    timeline
  end

  def process_links(timeline)
    unless timeline.empty?
      save_new_id(get_new_id(timeline))
      display_links(timeline)
    end
  end

  def get_new_id(timeline)
    timeline.first(2).last.first
  end

  def save_new_id(new_id)
    File.open(RCFILENAME, 'w') { |f| f.write("#{ new_id }\n") }
  end

  def display_links(timeline)
    links_displayed = Set.new
    timeline.each do |tweet|
      next unless link = get_link(tweet)
      next unless redirect_link = get_redirect_link(link)
      next if filtered?(redirect_link)
      next if links_displayed.include?(redirect_link)
      links_displayed << redirect_link
      printf("http://twitter.com/%s/status/%s\n\t%s\n\t%s\n\n",
              get_screename(tweet),
              get_id(tweet),
              get_title(redirect_link),
              redirect_link)
    end
  end

  def get_link(tweet)
    /(http\S+)/.match(tweet.last).to_a.first
  end

  def get_redirect_link(link)
    http_client = HTTPClient.new
    head = http_client.head(link)
    while head.code.between?(300, 399)
      link = head.header['Location'].first
      link = link.split(/:([^:]*)$/).first if link =~ /:.*:\d+$/
      head = http_client.head(link)
    end
    head.code.between?(200, 299) ? normalize_link(link) : nil
  rescue
    nil
  end

  def normalize_link(link)
    link.sub(/utm_.*$/, '')
  end

  def filtered?(link)
    FILTERS.any? { |filter| filter.match(link) }
  end

  def get_screename(tweet)
    tweet[-2]
  end

  def get_id(tweet)
    tweet.first
  end

  def get_title(link)
    title = Nokogiri::HTML(@http_client.get(link).body).css('head title').inner_text
    title.to_s.empty? ? '[no title]' : title.strip.gsub(/\s+/, ' ')
  rescue
    '[no title]'
  end
end

CLI.start(ARGV) if $0 == __FILE__
