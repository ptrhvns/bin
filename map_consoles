#!/usr/bin/env python

"""This program uses SSH to login to a list of terminal servers obtained from
a file (one server per line), and then extracts the list of system consoles
attached to each terminal server using the `ts_menu -l` command.
"""

import io
import optparse
import os
import os.path
import re
import subprocess
import sys

def warn(msg):
    sys.stderr.write('WARNING: ' + msg + '\n')

def die(msg):
    sys.stderr.write('ERROR: ' + msg + '\n')
    sys.exit(1)

def main():
    o = optparse.OptionParser(description=__doc__)
    o.set_defaults(ts_list=os.path.join(os.environ['HOME'], 'etc', 'ts_list'))
    o.set_defaults(user=os.environ['USER'])

    o.add_option('-t', '--ts_list', dest='ts_list',
            help='file with terminal server list [default: %default]',
            metavar='FILE')

    o.add_option('-u', '--user', dest='user', help='user to SSH as',
            metavar='USER')

    (opts, args) = o.parse_args()

    try:
        ts_list = [line.rstrip() for line in open(opts.ts_list).readlines()]
    except IOError as detail:
        die('Failed to open %s: %s' % (ts_list, detail))

    for ts in ts_list:
        try:
            sys.stderr.write('>>> server %s\n' % (ts))
            ssh = subprocess.Popen(
                    'ssh -l %s %s ts_menu -l' % (opts.user, ts), shell=True,
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except OSError as detail:
            die('Failed to exec SSH: %s' % (detail))

        ssh.wait()

        if ssh.returncode != 0:
            warn('SSH returned: %s\n%s' % (ssh.returncode,
                ''.join(ssh.stderr.readlines())))
            continue

        for line in [L.rstrip() for L in ssh.stdout.readlines()]:
            if re.search('^\s*$', line) is not None: continue
            if re.search('^\s*Serial\s+Console', line) is not None: continue
            print('%s %s' %(ts.lower(), line.lower()))

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit()
