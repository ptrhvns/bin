#!/usr/bin/env ruby

require "optparse"
require "set"
require "stringio"

# Parse the command line options and remove them from ARGV.
def parse_arguments
  parser = OptionParser.new

  parser.banner = <<-END
usage: #{File.basename($0)} [options]

This program uses pmap data to calculate the total memory usage of running
processes. Shared objects are only counted once. By default, this program
will try and run against all current running processes, and therefore must
be run with root privileges.
  END

  parser.separator ""
  parser.separator "options:"
  opts = {}

  parser.on("-h", "--help", "show this message and exit") do
    puts parser
    exit
  end

  parser.on("-s", "--stdin", "read data from stdin") do
    opts[:stdin] = true
  end

  parser.on("-v", "--version", "show version and exit") do
    puts %q$Id: get_mem_usage 245 2007-04-30 17:01:28Z havens $
    exit
  end

  parser.parse! ARGV rescue OptionParser::InvalidOption abort($!)
  opts
end

# Run this block if this file is executed.
if $0 == __FILE__
  opts = parse_arguments
  io = $stdin

  unless opts[:stdin]
    data = ""

    Dir.glob("/proc/*") do |fname|
      if fname == "/proc/#{$$}" then next end
      data << %x{pmap #{fname} 2> /dev/null}
    end

    io = StringIO.new(data)
  end

  so_total = shmem_total = other_total = 0
  so_keys, shmem_keys = Set.new, Set.new

  io.each do |line|
    line.chomp!
    next if line =~ /(^\d+:|^\s+total\s+\d+K)/
    address, size, status, name = line.split
    size = size.gsub("K", "").to_i

    if name =~ /\.so(\.\d+)*$/
      unless so_keys.include?(size.to_s + status + name)
        so_total += size
        so_keys << size.to_s + status + name
      end
    elsif status =~ /s/
      unless shmem_keys.include?(address)
        shmem_total += size
        shmem_keys << address
      end
    else
      other_total += size
    end
  end

  puts "#{(so_total + shmem_total + other_total) * 1024}"
end
