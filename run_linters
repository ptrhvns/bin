#!/usr/bin/env python

import argparse
import json
import os
import re
import sys

sys.path.append(os.path.join(os.environ["HOME"], "lib"))

import output  # isort:skip
import shell  # isort:skip


class LintingStrategyNotFoundError(Exception):
    def __init__(self, filename):
        super().__init__(f"testing strategy not found for {filename}")


def process_args():
    parser = argparse.ArgumentParser(
        description="Detect how to run linters, and run them."
    )
    parser.add_argument(
        "file_name", help="name of the file from which this command was run"
    )
    return parser.parse_args()


def find_up_tree(directory, file):
    root_visited = False
    while True:
        if root_visited:
            return None

        full_path = os.path.join(directory, file)

        if os.path.exists(full_path):
            return full_path
        else:
            directory, _ = os.path.split(directory)

            if directory == "/":
                root_visited = True


def javascript(args):
    abs_file_name = os.path.abspath(args.file_name)
    package_path = find_up_tree(os.path.dirname(abs_file_name), "package.json")

    if not package_path:
        raise LintingStrategyNotFoundError(args.file_name)

    with shell.cd(os.path.dirname(package_path)):
        with open(package_path) as package_file:
            scripts = json.load(package_file)["scripts"]
            lint_script = scripts.get("lint")

            if not lint_script:
                raise LintingStrategyNotFoundError(args.file_name)

            if "eslint" in lint_script:
                cmd = ["npx", "eslint", abs_file_name]
            else:
                raise LintingStrategyNotFoundError(args.file_name)

            shell.run(cmd, verbose=True)


if __name__ == "__main__":
    args = process_args()

    try:
        if re.search(r"\.jsx?$", args.file_name):
            javascript(args)
        else:
            raise LintingStrategyNotFoundError(args.file_name)
    except LintingStrategyNotFoundError as e:
        output.die(str(e))
