#!/usr/bin/env ruby

module Enumerable
  def sum
    self.reduce(:+)
  end

  def mean
    sum / length.to_f
  end

  def median
    n = length
    values = sort

    if n.odd?
      return values[(n + 1) / 2]
    else
      return (values[n / 2] + values[(n / 2) + 1]) / 2
    end
  end

  def sample_variance
    m = mean
    sum = inject(0) {|accum, i| accum + (i - m) ** 2 }
    sum / (length - 1).to_f
  end

  def standard_deviation
    Math.sqrt(sample_variance)
  end

  def range
    values = sort
    "#{ values.first } - #{ values.last }"
  end
end

author = ARGV.first
data = {}
date = ''

%x(git log --numstat --format="%ad" --author="#{ author }").each_line do |line|
  case line
  when /^([MTWFS]\S+\s+\S+\s+\S+)/
    date = $1
    data[date] = :none
  when /^(\d+)/
    insertions = $1.to_i
    old_value = (:none == data[date]) ? 0 : data[date]
    data[date] = old_value + insertions
  end
end

values = data.values.reject { |v| :none == v}

puts <<END
LOC / day (#{ author })
  median             => #{ values.median.round(1) }
  mean               => #{ values.mean.round(1) }
  standard deviation => #{ values.standard_deviation.round(1) }
  range              => #{ values.range }
END
