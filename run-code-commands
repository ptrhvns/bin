#!/usr/bin/env python

import argparse
import contextlib
import os
import pathlib
import re
import subprocess
import sys

MSG_PREFIX = "###"
PRETTIER_RE = r"\.(cjs|css|html|js|json|jsx|md|scss|ts|tsx)$"
PYTHON_PACKAGE_FILES = ["pyproject.toml"]
PYTHON_RE = r"\.py$"
RUST_RE = r"\.rs$"


def error(message):
    print(f"{MSG_PREFIX} ERROR: {message}", file=sys.stderr)
    sys.exit(1)


def say(message):
    print(f"{MSG_PREFIX} {message}", file=sys.stderr)


def warn(message):
    print(f"{MSG_PREFIX} WARNING: {message}", file=sys.stderr)


def file_contains(path, text):
    with open(path) as f:
        return True if text in f.read() else False


@contextlib.contextmanager
def cd(directory):
    save_directory = os.getcwd()
    os.chdir(directory)
    yield
    os.chdir(save_directory)


def run(command):
    try:
        subprocess.run(command.split(" "), check=True)
    except subprocess.CalledProcessError as exc:
        error(f"command returned status code {exc.returncode}: {command}")


def find_up_tree(directory, file):
    root_visited = False

    while True:
        if root_visited:
            return None

        full_path = os.path.join(directory, file)

        if os.path.exists(full_path):
            return full_path
        else:
            directory, _ = os.path.split(directory)

            if directory == "/":
                root_visited = True


def build_cd_directory(package_path):
    return os.path.dirname(package_path) if package_path else str(pathlib.Path.home())


def format_prettier_file(abs_file_name):
    package_path = find_up_tree(os.path.dirname(abs_file_name), "package.json")
    cd_directory = build_cd_directory(package_path)

    with cd(cd_directory):
        say("Running prettier")
        run(f"npx prettier --write {abs_file_name}")

        if not package_path:
            return

        with open(package_path, mode="r", encoding="utf-8") as f:
            contents = f.read()

            if re.search(r"\.(ts|tsx)", abs_file_name):
                if re.search("typescript", contents):
                    say("Running tsc")
                    run("npx tsc --noEmit")

            if re.search("eslint", contents):
                say("Running eslint")
                run(f"npx eslint {abs_file_name}")


def find_python_package_path(abs_file_name):
    for package_file in PYTHON_PACKAGE_FILES:
        package_path = find_up_tree(os.path.dirname(abs_file_name), package_file)

        if package_path:
            return package_path

    return None


def format_python_file(abs_file_name):
    package_path = find_python_package_path(abs_file_name)
    cd_directory = build_cd_directory(package_path)

    with cd(cd_directory):
        say("Running black")
        run(f"black {abs_file_name}")

        if package_path:
            say("Running isort")
            run(f"isort --profile black --atomic {abs_file_name}")
        else:
            warn("Skipping isort (no package file found)")

        if package_path:
            say("Running flake8")
            run(f"flake8 {abs_file_name}")
        else:
            say("Running flake8")
            run(f"flake8 --ignore=E402,E501 {abs_file_name}")

        if package_path:
            with open(package_path, mode="r", encoding="utf-8") as f:
                if re.search("mypy", f.read()):
                    say("Running mypy")
                    run("mypy")


def format_rust_file(abs_file_name):
    say("Running rustfmt")
    run(f"rustfmt {abs_file_name}")


def format_bash_file(abs_file_name):
    say("Running shfmt")
    run(f"shfmt -i 4 -s -sr -w {abs_file_name}")
    say("Running shellcheck")
    run(f"shellcheck {abs_file_name}")


def main():
    parser = argparse.ArgumentParser(description="Run code formatters on a given file.")
    parser.add_argument("file_name", help="name of the file to run formatters on")
    file_name = parser.parse_args().file_name
    abs_file_name = os.path.abspath(file_name)

    if re.search(PRETTIER_RE, abs_file_name):
        format_prettier_file(abs_file_name)
    elif re.search(PYTHON_RE, abs_file_name) or file_contains(abs_file_name, "python"):
        format_python_file(abs_file_name)
    elif re.search(RUST_RE, abs_file_name):
        format_rust_file(abs_file_name)
    elif file_contains(abs_file_name, "#!/usr/bin/env bash"):
        format_bash_file(abs_file_name)
    else:
        error(f"unsupported file type: {file_name}")


if __name__ == "__main__":
    main()
