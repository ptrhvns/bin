#!/usr/bin/env python

import argparse
import contextlib
import os
import pathlib
import re
import subprocess
import sys

MSG_PREFIX = "###"
PRETTIER_RE = r"\.(cjs|css|html|js|json|jsx|md|scss|ts|tsx)$"
PYTHON_PACKAGE_FILES = ["pyproject.toml"]
PYTHON_RE = r"\.py$"


def error(message):
    print(f"{MSG_PREFIX} ERROR: {message}", file=sys.stderr)
    sys.exit(1)


def say(message):
    print(f"{MSG_PREFIX} {message}", file=sys.stderr)


def warn(message):
    print(f"{MSG_PREFIX} WARNING: {message}", file=sys.stderr)


def file_contains(path, text):
    with open(path) as f:
        return True if text in f.read() else False


@contextlib.contextmanager
def cd(directory):
    save_directory = os.getcwd()
    os.chdir(directory)
    yield
    os.chdir(save_directory)


def run(command):
    try:
        subprocess.run(command.split(" "), check=True)
    except subprocess.CalledProcessError as exc:
        error(f"command returned status code {exc.returncode}: {command}")


def find_up_tree(directory, file):
    root_visited = False

    while True:
        if root_visited:
            return None

        full_path = os.path.join(directory, file)

        if os.path.exists(full_path):
            return full_path
        else:
            directory, _ = os.path.split(directory)

            if directory == "/":
                root_visited = True


def run_prettier_code_commands(args, abs_file_name):
    package_file = find_up_tree(os.path.dirname(abs_file_name), "package.json")
    package_dir = os.path.dirname(package_file) if package_file else None

    with cd(package_dir or str(pathlib.Path.home())):
        say("Running prettier")
        run(f"npx prettier --write {abs_file_name}")

    if not args.format:
        if package_file:
            with open(package_file, mode="r", encoding="utf-8") as f:
                package_file_contents = f.read()

            with cd(package_dir):
                if re.search(r"\.(ts|tsx)$", abs_file_name):
                    if re.search("typescript", package_file_contents):
                        say("Running tsc")
                        run("npx tsc --noEmit")

                if re.search(r"\.(js|jsx|ts|tsx)$", abs_file_name):
                    if re.search("eslint", package_file_contents):
                        say("Running eslint")
                        run(f"npx eslint {abs_file_name}")

                if re.search(r"\.(css|scss)$", abs_file_name):
                    if re.search("stylelint", package_file_contents):
                        say("Running stylelint")
                        run(f"npx stylelint {abs_file_name}")


def find_python_package_path(abs_file_name):
    for package_file in PYTHON_PACKAGE_FILES:
        package_path = find_up_tree(os.path.dirname(abs_file_name), package_file)

        if package_path:
            return package_path

    return None


def run_python_code_commands(args, abs_file_name):
    package_file = find_python_package_path(abs_file_name)
    package_dir = os.path.dirname(package_file) if package_file else None

    with cd(package_dir or str(pathlib.Path.home())):
        say("Running black")
        run(f"black {abs_file_name}")

        if package_file:
            say("Running isort")
            run(f"isort --profile black --atomic {abs_file_name}")
        else:
            warn("Skipping isort (no package file found)")

        if not args.format:
            if package_file:
                with open(package_file, mode="r", encoding="utf-8") as f:
                    contents = f.read()

                    if re.search("ruff", contents):
                        say("Running ruff")
                        run(f"ruff check {abs_file_name}")
                    else:
                        say("Running flake8")
                        run(f"flake8 {abs_file_name}")

                    if re.search("mypy", contents):
                        say("Running mypy")
                        run("mypy")
            else:
                say("Running flake8")
                run(f"flake8 --ignore=E402,E501 {abs_file_name}")


def run_bash_code_commands(args, abs_file_name):
    say("Running shfmt")
    run(f"shfmt -i 4 -s -sr -w {abs_file_name}")

    if not args.format:
        say("Running shellcheck")
        run(f"shellcheck {abs_file_name}")


def main():
    parser = argparse.ArgumentParser(description="Run code formatters on a given file.")
    parser.add_argument(
        "-f", "--format", action="store_true", help="only run format command"
    )
    parser.add_argument("file_name", help="name of the file to run formatters on")
    args = parser.parse_args()
    abs_file_name = os.path.abspath(args.file_name)

    if re.search(PRETTIER_RE, abs_file_name):
        run_prettier_code_commands(args, abs_file_name)
    elif re.search(PYTHON_RE, abs_file_name) or file_contains(abs_file_name, "python"):
        run_python_code_commands(args, abs_file_name)
    elif file_contains(abs_file_name, "#!/usr/bin/env bash"):
        run_bash_code_commands(args, abs_file_name)
    else:
        error(f"unsupported file type: {args.file_name}")


if __name__ == "__main__":
    main()
