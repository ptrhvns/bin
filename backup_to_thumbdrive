#!/usr/bin/env python

from argparse import ArgumentParser
from contextlib import contextmanager
from os import chdir, environ, getcwd, listdir, makedirs, path
from os.path import exists, expanduser, isdir, isfile, join
from subprocess import CalledProcessError, run
from sys import exit, stderr

PREFIX = '>>>'

RED = '\033[38;5;124m'
RESET = '\033[0;0m'
ERROR = f'{RED}ERROR{RESET}:'
WARNING = f'{RED}WARNING{RESET}:'

HOME = environ['HOME']
USER = environ['USER']

THUMBDRIVE = f'/Volumes/thumbdrive/{USER}'
THUMBDRIVE_NAME = 'thumbdrive'


def home(*paths):
    return path.join(HOME, *paths)


def thumbdrive(*paths):
    return path.join(THUMBDRIVE, *paths)


def relative_subdirs(*paths):
    rsdirs = [path.join(*paths, d) for d in listdir(home(*paths))]
    return [d for d in rsdirs if isdir(home(d))]


DIRECTORIES_TO_BACKUP = ['bin', path.join('src', 'rcfiles')] \
    + relative_subdirs('doc') \
    + relative_subdirs('src', 'personal')


def isgitdir(dir_):
    return True if isdir(path.join(dir_, '.git')) else False


def warn(*msg, exc=None):
    joined = ' '.join(msg)
    output = f'{joined}: {exc}' if exc else joined
    print(PREFIX, WARNING, output, file=stderr)


def die(*msg, exc=None):
    joined = ' '.join(msg)
    output = f'{joined}: {exc}' if exc else joined
    print(PREFIX, ERROR, output, file=stderr)
    exit(1)


def say(*msg):
    print(PREFIX, *msg)


def sh(cmd):
    try:
        run(cmd).check_returncode()
    except Exception as exc:
        arg = ' '.join(cmd) if isinstance(cmd, (list, tuple)) else cmd
        die('command failed:', arg, exc=exc)


@contextmanager
def cd(dir_):
    savedir = getcwd()
    chdir(expanduser(dir_))
    try:
        yield
    finally:
        chdir(savedir)


def process_args():
    parser = ArgumentParser(
        description='Backup directories to a USB thumbdrive.'
    )
    parser.add_argument(
        '-D',
        action='store_false',
        dest="dirty_check",
        help='skip dirty checking Git repositories',
    )
    return parser.parse_args()


def dirty_check_git():
    # TODO inline dirty_check_git?
    say('checking for dirty Git directories')
    sh('dirty_check_git')
    print('\n')


def check_thumbdrive():
    say('checking thumbdrive')
    # TODO check that thumbdrive is mounted
    if not isdir(THUMBDRIVE):
        die('directory not found:', THUMBDRIVE)
    print('\n')


def setup_dest(dest):
    if not exists(dest):
        say('creating directory:', dest)
        makedirs(dest, exist_ok=True)
    if not isgitdir(dest):
        with cd(dest):
            say('initializing Git repository:', dest)
            sh(['git', 'init'])


def clean_git(source, dest, did_dirty_check):
    with cd(dest):
        say('cleaning up Git repository:', dest)
        sh(['git', 'gc', '--auto'])
    if did_dirty_check:
        with cd(source):
            say('cleaning up Git repository:', source)
            sh(['git', 'gc', '--auto'])


def sync_git(source, dest, did_dirty_check):
    with cd(dest):
        say('syncing Git repository:', source, '->', dest)
        sh(['git', 'pull', source])
    if did_dirty_check:
        with cd(source):
            say('syncing Git repository:', dest, '->', source)
            sh(['git', 'pull', dest])


def backup(source, dest, did_dirty_check):
    say('backing up:', source, '->', dest)
    if not isdir(source):
        warn('skipping:', 'not a directory:', source)
    elif exists(dest) and not isdir(dest):
        warn('skipping:', 'not a directory:', dest)
    elif not isgitdir(source):
        warn('skipping:', 'not a Git repository:', source)
    else:
        setup_dest(dest)
        clean_git(source, dest, did_dirty_check)
        sync_git(source, dest, did_dirty_check)
    print('\n')


def process_directories(did_dirty_check=True):
    # TODO remove dest w/o corresponding source
    for dir_ in DIRECTORIES_TO_BACKUP:
        source = home(dir_)
        dest = thumbdrive(dir_)
        backup(source, dest, did_dirty_check=did_dirty_check)


def unmount_thumbdrive():
    say('unmounting thumbdrive')
    sh(['diskutil',  'unmount', THUMBDRIVE_NAME])
    print('\n')


if __name__ == '__main__':
    args = process_args()
    if args.dirty_check:
        dirty_check_git()
    check_thumbdrive()
    process_directories(args.dirty_check)
    unmount_thumbdrive()
