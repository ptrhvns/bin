#!/usr/bin/env python

import argparse
import os
import sys

sys.path.append(os.path.join(os.environ['HOME'], 'lib'))

from pylocal import directories, git, output, shell


def process_args():
    parser = argparse.ArgumentParser(
        description='Backup directories to a USB thumbdrive.'
    )
    parser.add_argument(
        '-D',
        action='store_false',
        dest="dirty_check",
        help='skip dirty checking Git repositories',
    )
    return parser.parse_args()


def dirty_check_git():
    output.say('checking for dirty Git directories')
    shell.run('dirty_check_git')
    print('\n')


def check_thumbdrive():
    output.say('checking thumbdrive')
    # TODO check that thumbdrive is mounted
    if not os.path.isdir(directories.THUMBDRIVE):
        output.die('directory not found:', directories.THUMBDRIVE)
    print('\n')


def setup_dest(dest):
    if not os.path.exists(dest):
        output.say('creating directory:', dest)
        os.makedirs(dest, exist_ok=True)
    if not git.isgitdir(dest):
        with shell.cd(dest):
            output.say('initializing Git repository:', dest)
            shell.run(['git', 'init'])


def clean_git(source, dest, did_dirty_check):
    with shell.cd(dest):
        output.say('cleaning up Git repository:', dest)
        shell.run(['git', 'gc', '--auto'])
    if did_dirty_check:
        with shell.cd(source):
            output.say('cleaning up Git repository:', source)
            shell.run(['git', 'gc', '--auto'])


def sync_git(source, dest, did_dirty_check):
    with shell.cd(dest):
        output.say('syncing Git repository:', source, '->', dest)
        shell.run(['git', 'checkout', 'master'])
        shell.run(['git', 'pull', source, 'master'])
    if did_dirty_check:
        with shell.cd(source):
            output.say('syncing Git repository:', dest, '->', source)
            shell.run(['git', 'checkout', 'master'])
            shell.run(['git', 'pull', dest, 'master'])


def backup(source, dest, did_dirty_check):
    output.say('backing up:', source, '->', dest)
    if not os.path.isdir(source):
        output.warn('skipping:', 'not a directory:', source)
    elif os.path.exists(dest) and not os.path.isdir(dest):
        output.warn('skipping:', 'not a directory:', dest)
    elif not git.isgitdir(source):
        output.warn('skipping:', 'not a Git repository:', source)
    else:
        setup_dest(dest)
        clean_git(source, dest, did_dirty_check)
        sync_git(source, dest, did_dirty_check)
    print('\n')


def process_directories(did_dirty_check=True):
    # TODO remove any dest w/o a corresponding source?
    for dir_ in directories.ALL_SUBDIRS:
        source = directories.home(dir_)
        dest = directories.thumbdrive(dir_)
        backup(source, dest, did_dirty_check=did_dirty_check)


def unmount_thumbdrive():
    output.say('unmounting thumbdrive')
    shell.run(['diskutil',  'unmount', directories.THUMBDRIVE_NAME])
    print('\n')


if __name__ == '__main__':
    args = process_args()
    if args.dirty_check:
        dirty_check_git()
    check_thumbdrive()
    process_directories(args.dirty_check)
    unmount_thumbdrive()
